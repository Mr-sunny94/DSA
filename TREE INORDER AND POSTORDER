include <stdio.h>
#include <stdlib.h>

// Definition of the node structure
struct node {
    int item;
    struct node* left;
    struct node* right;
};

// Function to create a new node
struct node* createNode(int value) {
    struct node* newNode = malloc(sizeof(struct node));
    newNode->item = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node in the BST
struct node* insert(struct node* root, int value) {
    // If the tree is empty, return a new node
    if (root == NULL) {
        return createNode(value);
    }
    // Otherwise, recur down the tree
    if (value < root->item) {
        root->left = insert(root->left, value);
    } else if (value > root->item) {
        root->right = insert(root->right, value);
    }
    // Return the (unchanged) node pointer
    return root;
}

// Function for inorder traversal of the BST
void inorderTraversal(struct node* root) {
    if (root == NULL)
    return;
    inorderTraversal(root->left);
    printf("%d -> ", root->item);
    inorderTraversal(root->right);
}

// Function for postorder traversal of the BST
void postorderTraversal(struct node* root) {
    if (root == NULL) 
    return;
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    printf("%d -> ", root->item);
}

int main() {
    struct node* root = NULL;
    int choice, value;

    while (1) {
        printf("\n1. Insert\n2. Inorder Traversal\n3. Postorder Traversal\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                root = insert(root, value);
                break;
            case 2:
                printf("Inorder traversal:\n");
                inorderTraversal(root);
                printf("\n");
                break;
            case 3:
                printf("Postorder traversal:\n");
                postorderTraversal(root);
                printf("\n");
                break;
            case 4:
                exit(0);
                break;
            default:
                printf("Invalid choice!\n");
                break;
        }
    }

    return 0;
}
